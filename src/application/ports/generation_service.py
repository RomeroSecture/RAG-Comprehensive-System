from abc import ABC, abstractmethod
from typing import List, Optional
from dataclasses import dataclass
from src.domain.entities.retrieval_result import RetrievedDocument


@dataclass
class GeneratedResponse:
    """Response generated by the generation service."""
    text: str
    confidence: float
    tokens_used: int
    model_name: str
    citations: Optional[List[str]] = None


class GenerationService(ABC):
    """Port for text generation service implementations."""
    
    @abstractmethod
    async def generate_response(
        self,
        query: str,
        context: List[RetrievedDocument],
        system_prompt: Optional[str] = None,
        max_tokens: int = 1000,
        temperature: float = 0.7
    ) -> GeneratedResponse:
        """Generate a response based on query and retrieved context."""
        pass
    
    @abstractmethod
    async def generate_streaming_response(
        self,
        query: str,
        context: List[RetrievedDocument],
        system_prompt: Optional[str] = None,
        max_tokens: int = 1000,
        temperature: float = 0.7
    ):
        """Generate a streaming response."""
        pass
    
    @abstractmethod
    def get_model_name(self) -> str:
        """Get the name of the generation model being used."""
        pass